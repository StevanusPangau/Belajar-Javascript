# APA SYNCHRONOUS
- Program dalam JavaScript secara default akan dieksekusi baris per baris
- Secara default, proses di JavaScript akan dieksekusi secara Synchronous, artinya baris selanjutnya akan dieksekusi setelah baris sebelumnya selesai dikerjakan
- Proses Synchronous juga biasa disebut Blocking, karena harus menunggu tiap proses selesai, baru proses selanjutnya bisa dilakukan

# APA ASYNCHRONOUS
- Walaupun secara default proses di JavaScript dieksekusi secara Synchronous, namun kita bisa membuatnya menjadi Asynchronous.
- Berbeda dengan proses Synchronous, pada proses Asynchronous, JavaScript tidak akan menunggu proses tersebut selesai, melainkan JavaScript akan melanjutkan baris selanjutnya, tanpa harus menunggu proses Asynchronous selesai.
- Proses Asynchronous juga biasa disebut Non-Blocking.

#1 APA ITU CALLBACK
- Callback, merupakan mekanisme untuk memanggil kembali kode yang ada di program dari proses Async
- Callback biasanya dibuat dalam bentuk function as parameter, dan parameter function tersebut akan dieksekusi saat proses Async selesai
- Dengan menggunakan Callback, program bisa menerima informasi yang dibutuhkan dari proses yang berjalan secara Async

#1 ASCYN METHOD
- Ada banyak method Async yang terdapat di JavaScript, yang akan kita bahas kali ini adalah :
- setTimeout(callback, timeInMilis), digunakan untuk menjalankan proses Async sekali dalam waktu tertentu.
- setInterval(callback, timeInMilis), digunakan untuk menjalankan proses Async secara periodik dalam waktu tertentu.

#2 APA ITU AJAX
- AJAX singkatan dari Asynchronous JavaScript and XML
- AJAX biasanya digunakan untuk mengambil atau mengirim data ke URL lain
- Untuk membuat AJAX, kita bisa menggunakan class XMLHttpRequest
- https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest 

#3 MENERIMA DATA DI AJAX
- AJAX biasanya digunakan untuk mengirim data ke Server atau menerima data dari Server
- Tiap request AJAX yang dilakukan, biasanya kita ingin mendapat informasi response yang diberikan oleh Server
- Kita tidak bisa langsung mengambil response AJAX, karena proses AJAX adalah Async, sehingga kita perlu menunggu sampai proses Async nya selesai.
- Untuk mendapatkan informasi AJAX, kita bisa menggunakan AJAX Callback, yang akan dieksekusi setelah proses AJAX selesai
- Untuk menambahkan AJAX Callback, kita bisa tambahkan pada event load
- https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/load_event 
- Dan untuk mengambil datanya dari server, kita bisa menggunakan property responseText

#4 RESPONSE STATUS
- AJAX adalah proses komunikasi Client dan Server
- Dalam komunikasi Client dan Server, kita tidak bisa selalu menganggap proses tersebut akan berjalan lancar.
- Akan ada banyak hal-hal yang bisa mengganggu proses AJAX yang bisa menyebabkan error, seperti; koneksi internet bermasalah, error dari server, data dari client tidak valid, dan lain-lain.
- Server biasanya akan mengirimkan HTTP Status Code yang sesuai dengan jenis response nya, seperti yang sudah dibahas di materi HTTP
- Untuk mengetahui status response dari Server, kita bisa menggunakan property status
- https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/status 

#5 STATE DI AJAX
- AJAX memiliki tahapan state, dimana kita bisa mendapatkan banyak sekali state di Ajax menggunakan property readyState
- Property readyState mengembalikan nilai number, dimana tiap number merupakan representasi dari statenya

#5 DAFTAR STATE
- 0 = UNSENT            -> Client has been created. open() note called yet
- 1 = OPENED            -> open() has been called
- 2 = HEADERS_RECEIVED  -> send() has been called, and headers and status are available
- 3 = LOADING           -> Downloading; responseText hold partial data.
- 4 = DONE              -> The operation is compled

#5 READY STATE CHANGE EVENT
- Jika kita ingin mendengarkan perubahan yang terjadi pada state, kita bisa menggunakan event readystatechange
- https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/onreadystatechange 

# HOOKBIN
- Sebelum kita melanjutkan belajar AJAX, kita perlu bantuan Server sebagai tujuan pengiriman data di AJAX
- Kita akan menggunakan salah satu website yang gratis dan lumayan populer untuk menerima data AJAX yang kita kirim, yaitu Hookbin
- Hookbin adalah aplikasi yang bisa digunakan untuk menerima request HTTP dan menyimpan datanya, dengan ini kita bisa menggunakan Hookbin untuk melihat detail dari data AJAX yang kita kirim
- https://hookbin.com/ 

# ALTERNATIVE LAIN
- Jika teman-teman mendapat masalah ketika mengakses website Hookbin, ada banyak alternatif lain website seperti Hookbin, misalnya :
- https://requestbin.net/ 
- https://pipedream.com/requestbin 
- https://beeceptor.com/ 

#6 MENGIRIM DATA DENGAN AJAX
- Saat kita menggunakan AJAX, biasanya bukan hanya untuk mengambil data dari Server
- Kadang kita juga ingin mengirim data dari Client ke Server, misalnya kita membaca semua data di Web Form, lalu mengirimkan ke Server menggunakan AJAX
- Untuk melakukan ini, kita bisa menambahkan parameter data yang akan kita kirim pada method send() milik XMLHttpRequest
- https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/send 

#7 URL SEARCH PARAM
- Selain format JSON, kadang saat mengirim data menggunakan AJAX, kita hanya mengirim dalam bentuk Query Parameter
- Pada kasus ini, kita bisa saja mengubah url nya dengan menambahkan Query Parameter, namun ada cara yang lebih mudah, yaitu menggunakan object URLSearchParam
- Kita bisa memanfaatkan object URLSearchParam sebelum membuat URL
- https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams 

#8 FORM DATA DENGAN AJAX
- Selain JSON dan Query Param, kadang kita juga mengirim Form Data dari Client ke Server menggunakan AJAX
- Untuk kasus ini kita tetap bisa menggunakan URLSearchParam
- Namun object URLSearchParam nya kita kirim di method send()

#9 UPLOAD FILE DENGAN AJAX
- Selain menggunakan JSON, Query Param, Form, kadang kita butuh mengirim file ke Server
- Untuk mengirim file ke Server, kita perlu menggunakan object Form Data, lalu kita perlu menambahkan object File ke dalam FormData tersebut
- https://developer.mozilla.org/en-US/docs/Web/API/FormData 
- https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file 
- https://developer.mozilla.org/en-US/docs/Web/API/File 
- https://developer.mozilla.org/en-US/docs/Web/API/FileList 

#10 APA ITU PROMISE
- Promise merupakan proxy untuk sebuah nilai di masa depan (Future) yang belum diketahui saat pembuatan Promise tersebut.
- Biasa Promise digunakan sebagai proxy untuk proses Async.
- Penggunaan Promise sangat mudah, dan lebih mirip dengan kode Synchronous.
- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise 

#10 PROMISE STATE
- state = pending, fulfilled, rejected
    - pending yaitu datanya masih belum ada atau masih belum jelas ada atau tidak, jadi dari pending bisa ke fulfilled atau rejected
    - fulfilled yaitu data sudah ada
    - rejected yaitu data tidak ditemukan atau error
- result = undefined, value, error

#11 PROMISE METHOD
- Promise memiliki tiga method yang bisa kita gunakan 
- then() untuk mendapatkan atau mengubah data ketika Promise sukses
- catch() untuk mendapatkan data error ketika Promise gagal
- finally() akan dieksekusi ketika terjadi sukses atau gagal pada Promise
- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#instance_methods 

#11 PROMISE STATIC METHOD
- Promise juga memiliki beberapa static method
- Promise.all() digunakan untuk mengeksekusi beberapa promise sekaligus dan menunggu semua hasil promise nya
- Promise.any() digunakan untuk mengeksekusi beberapa promise sekaligus dan mengambil hasil promise paling cepat
- Dan lain-lain
- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#static_methods 

#12 FETCH API
- Fetch API merupakan fitur baru sebagai alternatif AJAX
- Saat menggunakan AJAX, kita perlu menggunakan Callback untuk menerima response atau data dari Server, sedangkan Fetch API sudah menggunakan Promise, sehingga penggunaan Fetch API lebih mudah dibandingkan AJAX
- Hampir semua browser modern sekarang sudah mendukung menggunakan Fetch API
- Apa yang bisa kita lakukan di AJAX, bisa juga kita lakukan di Fetch API
- https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API 

#12 REQUEST
- Saat kita akan mengirim request menggunakan Fetch API, kita perlu membuat object Request
- Hal ini menjadi lebih rapi dibandingkan menggunakan AJAX
- Kita bisa membuat object Request, lalu dikirim menggunakan Fetch API
- Dan saat membuat Request, kita bisa menentukan data yang ingin kita kirim
- https://developer.mozilla.org/en-US/docs/Web/API/Request/Request 

#12 RESPONSE
- Hasil dari Fetch API adalah sebuah Promise
- Promise tersebut berisikan object Response
- Ada banyak property dan method pada object Response, kita bisa menggunakannya sesuai dengan yang kita butuhkan
- https://developer.mozilla.org/en-US/docs/Web/API/Response 

#13 ASYNC AWAIT
- Async Await adalah fitur di JavaScript yang digunakan untuk mempermudah proses pembuatan kode Promise.
- Dengan menggunakan Async Await, kita bisa membuat kode Asynchronous dengan gaya Synchronous

#13 ASYNC
- Async digunakan untuk menandakan bahwa Function tersebut adalah Async, dan mengembalikan Promise
- Dengan menggunakan Async, kita tidak perlu membuat Promise secara manual lagi

#13 AWAIT
- Await digunakan untuk mendapatkan value hasil dari Promise
- Await hanya bisa digunakan dalam Async Function

#13 ERROR HANDLER DI ASYNC AWAIT
- Saat kita menggunakan Promise, kita bisa menggunakan catch() ketika terjadi error
- Bagaimana pada kasus Async Await?
- Pada Async Await, kita bisa menggunakan try catch untuk melakukan penanganan error
